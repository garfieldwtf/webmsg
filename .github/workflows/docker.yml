name: Build and Push Multi-Arch to GHCR

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*.*.*' ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:  # Manual trigger

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    name: Test Application
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Test Python syntax
      run: python -m py_compile app.py

    - name: Test web server functionality
      run: |
        export MESSAGE="GitHub Actions Test"
        timeout 10s python app.py &
        SERVER_PID=$!
        sleep 3
        curl -f http://localhost:8080 || exit 1
        kill $SERVER_PID 2>/dev/null || true

  build:
    name: Build Multi-Arch Docker Image
    runs-on: ubuntu-latest
    needs: test
    permissions:
      contents: read
      packages: write
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        driver-opts: |
          image=moby/buildkit:buildx-stable-1

    - name: Log in to GHCR
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=tag
          type=sha
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/386,linux/arm/v6,linux/arm/v7,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          BUILDKIT_INLINE_CACHE=1

  verify:
    name: Verify Multi-Arch Images
    runs-on: ubuntu-latest
    needs: build
    if: always()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Log in to GHCR
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Verify all architectures
      run: |
        # Get the latest tag
        LATEST_TAG="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
        
        # Check each architecture
        for arch in amd64 386 arm arm64; do
          echo "Verifying $arch architecture..."
          case $arch in
            amd64)
              platform="linux/amd64"
              ;;
            386)
              platform="linux/386"
              ;;
            arm)
              platform="linux/arm/v7"
              ;;
            arm64)
              platform="linux/arm64"
              ;;
          esac
          
          # Pull specific platform
          docker pull --platform $platform $LATEST_TAG
          
          # Verify image details
          docker image inspect $LATEST_TAG --format='{{.Architecture}} {{.Os}}' | grep -q "linux" || exit 1
          echo "âœ“ $arch verified"
        done

    - name: Test amd64 functionality
      run: |
        docker pull --platform linux/amd64 ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
        docker run -d --name test-amd64 -p 8080:8080 -e MESSAGE="AMD64 Test" ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
        sleep 5
        curl -f http://localhost:8080 || exit 1
        docker stop test-amd64
        docker rm test-amd64

  scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build
    if: always()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'
      if: always()

  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [build, verify]
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
